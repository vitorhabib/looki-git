import { useState, useEffect, useCallback } from 'react'
import { supabase } from '@/lib/supabase'
import { useToast } from '@/hooks/use-toast'

export interface Organization {
  id: string
  name: string
  email?: string
  phone?: string
  address?: string
  website?: string
  created_by: string
  created_at: string
  updated_at: string
}

export interface UserOrganization {
  id: string
  user_id: string
  organization_id: string
  role: 'owner' | 'admin' | 'member'
  created_at: string
  organization?: Organization
}

interface UseOrganizationsReturn {
  organizations: UserOrganization[]
  currentOrganization: Organization | null
  loading: boolean
  error: string | null
  loadUserOrganizations: () => Promise<void>
  setCurrentOrganization: (org: Organization) => void
  createOrganization: (name: string) => Promise<Organization | null>
  updateOrganization: (orgId: string, data: Partial<Organization>) => Promise<Organization | null>
  deleteOrganization: (orgId: string) => Promise<boolean>
}

export const useOrganizations = (userId?: string): UseOrganizationsReturn => {
  const [organizations, setOrganizations] = useState<UserOrganization[]>([])
  const [currentOrganization, setCurrentOrganizationState] = useState<Organization | null>(() => {
    // Recuperar do localStorage na inicializa√ß√£o
    try {
      const saved = localStorage.getItem('currentOrganization')
      console.log('üîÑ [DEBUG] Inicializando currentOrganization do localStorage:', saved);
      
      if (!saved) {
        console.log('üì¶ [DEBUG] Nenhuma organiza√ß√£o salva no localStorage');
        return null;
      }
      
      const parsed = JSON.parse(saved);
      
      // Verificar se a organiza√ß√£o tem as propriedades necess√°rias
      if (parsed && parsed.id && parsed.name) {
        console.log('üì¶ [DEBUG] currentOrganization v√°lida inicializada:', parsed);
        return parsed;
      } else {
        console.log('‚ö†Ô∏è [DEBUG] Organiza√ß√£o inv√°lida no localStorage, removendo:', parsed);
        localStorage.removeItem('currentOrganization');
        return null;
      }
    } catch (error) {
      console.log('‚ùå [DEBUG] Erro ao recuperar currentOrganization do localStorage:', error);
      localStorage.removeItem('currentOrganization');
      return null
    }
  })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const { toast } = useToast()

  const loadUserOrganizations = useCallback(async () => {
    if (!userId) {
      console.log('üë§ Nenhum userId fornecido para carregar organiza√ß√µes')
      return
    }

    setLoading(true)
    setError(null)

    try {
      console.log('üîÑ Carregando organiza√ß√µes para o usu√°rio:', userId)
      
      // Primeiro, verificar se as tabelas existem
      const { data: userOrgsData, error: fetchError } = await supabase
        .from('user_organizations')
        .select('*')
        .eq('user_id', userId)

      if (fetchError) {
        // Se as tabelas n√£o existem ainda, mostrar erro
        if (fetchError.code === '42P01' || fetchError.code === 'PGRST200') { // Tabela n√£o existe ou erro de relacionamento
          console.log('üìù Tabelas de organiza√ß√£o n√£o existem')
          setOrganizations([])
          
          toast({
            title: 'Erro de Configura√ß√£o',
            description: 'As tabelas de organiza√ß√£o n√£o foram criadas. Execute as migra√ß√µes do Supabase.',
            variant: 'destructive'
          })
          
          return
        }
        
        // Log apenas para erros inesperados
        console.error('‚ùå Erro inesperado ao carregar organiza√ß√µes:', fetchError)
        throw fetchError
      }

      // Se chegou aqui, as tabelas existem, agora buscar as organiza√ß√µes
      console.log('üìä [DEBUG] userOrgsData encontrada:', userOrgsData);
      
      if (userOrgsData && userOrgsData.length > 0) {
        const orgIds = userOrgsData.map(uo => uo.organization_id)
        console.log('üîç [DEBUG] IDs das organiza√ß√µes:', orgIds);
        
        const { data: orgsData, error: orgsError } = await supabase
          .from('organizations')
          .select('*')
          .in('id', orgIds)
          
        console.log('üè¢ [DEBUG] Dados das organiza√ß√µes:', orgsData);
        
        if (orgsError) {
          console.error('‚ùå Erro ao carregar dados das organiza√ß√µes:', orgsError)
          throw orgsError
        }
        
        // Combinar os dados
        const combinedData = userOrgsData.map(userOrg => {
          const org = orgsData?.find(org => org.id === userOrg.organization_id) || null;
          console.log(`üîó [DEBUG] Combinando userOrg ${userOrg.id} com org:`, org);
          return {
            ...userOrg,
            organization: org
          };
        });
        
        console.log('‚úÖ [DEBUG] Organiza√ß√µes combinadas finais:', combinedData);
        setOrganizations(combinedData)
      } else {
        console.log('üìù Nenhuma organiza√ß√£o encontrada para o usu√°rio')
        setOrganizations([])
      }
      
    } catch (err: any) {
      const errorMessage = err.message || 'Erro ao carregar organiza√ß√µes'
      setError(errorMessage)
      console.error('‚ùå Erro ao carregar organiza√ß√µes:', err)
      
      toast({
        variant: 'destructive',
        title: 'Erro',
        description: errorMessage,
      })
    } finally {
      setLoading(false)
    }
  }, [userId])

  // Carregar organiza√ß√µes quando o userId mudar
  useEffect(() => {
    console.log('üîÑ [DEBUG] useEffect userId mudou:', { userId, hasUserId: !!userId, userIdType: typeof userId });
    
    // S√≥ executar se userId for uma string v√°lida
    if (userId && typeof userId === 'string' && userId.trim() !== '') {
      console.log('üë§ [DEBUG] Carregando organiza√ß√µes para userId:', userId);
      loadUserOrganizations()
    } else if (userId === null || userId === undefined) {
      console.log('üóëÔ∏è [DEBUG] UserId √© null/undefined - aguardando inicializa√ß√£o');
      // N√£o limpar estados imediatamente, aguardar inicializa√ß√£o
    } else {
      console.log('‚ö†Ô∏è [DEBUG] UserId inv√°lido:', userId);
      // Limpar estados apenas se userId for explicitamente inv√°lido
      setOrganizations([])
    }
  }, [userId, loadUserOrganizations])

  // Limpar estados quando o usu√°rio faz logout (userId muda de string para null)
  useEffect(() => {
    // Se userId mudou de uma string v√°lida para null/undefined, limpar estados
    if (userId === null) {
      console.log('üö™ [DEBUG] Usu√°rio fez logout - limpando estados');
      setOrganizations([])
      setCurrentOrganizationState(null)
      localStorage.removeItem('currentOrganization')
    }
  }, [userId])

  const setCurrentOrganization = useCallback((org: Organization) => {
    console.log('üîÑ [DEBUG] setCurrentOrganization chamado com:', org);
    setCurrentOrganizationState(org)
    // Persistir no localStorage
    localStorage.setItem('currentOrganization', JSON.stringify(org))
    console.log('üíæ [DEBUG] Organiza√ß√£o salva no localStorage:', JSON.stringify(org));
  }, [])

  const createOrganization = useCallback(async (name: string): Promise<Organization | null> => {
    if (!userId) {
      toast({
        variant: 'destructive',
        title: 'Erro',
        description: 'Usu√°rio n√£o autenticado',
      })
      return null
    }

    setLoading(true)
    
    try {
      console.log('üîÑ Criando nova organiza√ß√£o:', name)
      
      // Criar a organiza√ß√£o
      const { data: newOrg, error: createError } = await supabase
        .from('organizations')
        .insert({
          name,
          created_by: userId
        })
        .select()
        .single()

      if (createError) {
        throw createError
      }

      // Associar o usu√°rio como owner
      const { error: userOrgError } = await supabase
        .from('user_organizations')
        .insert({
          user_id: userId,
          organization_id: newOrg.id,
          role: 'owner'
        })

      if (userOrgError) {
        throw userOrgError
      }

      console.log('‚úÖ Organiza√ß√£o criada:', newOrg.name)
      
      toast({
        title: 'Sucesso',
        description: `Organiza√ß√£o "${name}" criada com sucesso!`,
      })

      // Recarregar as organiza√ß√µes
      await loadUserOrganizations()
      
      // Definir a nova organiza√ß√£o como atual
      setCurrentOrganizationState(newOrg)
      
      return newOrg
      
    } catch (err: any) {
      const errorMessage = err.message || 'Erro ao criar organiza√ß√£o'
      console.error('‚ùå Erro ao criar organiza√ß√£o:', err)
      
      toast({
        variant: 'destructive',
        title: 'Erro',
        description: errorMessage,
      })
      
      return null
    } finally {
      setLoading(false)
    }
  }, [userId])

  const updateOrganization = useCallback(async (orgId: string, data: Partial<Organization>): Promise<Organization | null> => {
    if (!userId) {
      toast({
        variant: 'destructive',
        title: 'Erro',
        description: 'Usu√°rio n√£o autenticado',
      })
      return null
    }

    setLoading(true)
    
    try {
      console.log('üîÑ Atualizando organiza√ß√£o:', orgId, data)
      
      const { data: updatedOrg, error } = await supabase
        .from('organizations')
        .update({
          ...data,
          updated_at: new Date().toISOString()
        })
        .eq('id', orgId)
        .select()
        .single()
      
      if (error) {
        console.error('‚ùå Erro ao atualizar organiza√ß√£o:', error)
        throw error
      }
      
      console.log('‚úÖ Organiza√ß√£o atualizada:', updatedOrg)
      
      // Atualizar a organiza√ß√£o atual se for a mesma
      if (currentOrganization?.id === orgId) {
        setCurrentOrganizationState(updatedOrg)
      }
      
      // Atualizar a lista de organiza√ß√µes
      setOrganizations(prev => prev.map(userOrg => 
        userOrg.organization?.id === orgId 
          ? { ...userOrg, organization: updatedOrg }
          : userOrg
      ))
      
      toast({
        title: 'Sucesso',
        description: 'Informa√ß√µes da organiza√ß√£o atualizadas com sucesso!',
      })
      
      return updatedOrg
      
    } catch (err: any) {
      const errorMessage = err.message || 'Erro ao atualizar organiza√ß√£o'
      console.error('‚ùå Erro ao atualizar organiza√ß√£o:', err)
      
      toast({
        variant: 'destructive',
        title: 'Erro',
        description: errorMessage,
      })
      
      return null
    } finally {
      setLoading(false)
    }
  }, [userId, currentOrganization])

  const deleteOrganization = useCallback(async (orgId: string): Promise<boolean> => {
    if (!userId) {
      toast({
        variant: 'destructive',
        title: 'Erro',
        description: 'Usu√°rio n√£o autenticado',
      })
      return false
    }

    setLoading(true)
    
    try {
      console.log('üóëÔ∏è Excluindo organiza√ß√£o:', orgId)
      
      // Verificar se o usu√°rio √© owner da organiza√ß√£o
      const { data: userOrg, error: checkError } = await supabase
        .from('user_organizations')
        .select('role')
        .eq('user_id', userId)
        .eq('organization_id', orgId)
        .single()
      
      if (checkError || !userOrg || userOrg.role !== 'owner') {
        toast({
          variant: 'destructive',
          title: 'Erro',
          description: 'Apenas o propriet√°rio pode excluir a organiza√ß√£o',
        })
        return false
      }
      
      // Excluir a organiza√ß√£o (cascata ser√° tratada pelo banco)
      const { error: deleteError } = await supabase
        .from('organizations')
        .delete()
        .eq('id', orgId)
      
      if (deleteError) {
        console.error('‚ùå Erro ao excluir organiza√ß√£o:', deleteError)
        throw deleteError
      }
      
      console.log('‚úÖ Organiza√ß√£o exclu√≠da com sucesso')
      
      // Se a organiza√ß√£o exclu√≠da era a atual, limpar
      if (currentOrganization?.id === orgId) {
        setCurrentOrganizationState(null)
        localStorage.removeItem('currentOrganization')
      }
      
      // Recarregar organiza√ß√µes
      await loadUserOrganizations()
      
      toast({
        title: 'Sucesso',
        description: 'Organiza√ß√£o e todos os dados relacionados foram exclu√≠dos com sucesso!',
      })
      
      return true
      
    } catch (err: any) {
      const errorMessage = err.message || 'Erro ao excluir organiza√ß√£o'
      console.error('‚ùå Erro ao excluir organiza√ß√£o:', err)
      
      toast({
        variant: 'destructive',
        title: 'Erro',
        description: errorMessage,
      })
      
      return false
    } finally {
      setLoading(false)
    }
  }, [userId, currentOrganization, loadUserOrganizations])

  return {
    organizations,
    currentOrganization,
    loading,
    error,
    loadUserOrganizations,
    setCurrentOrganization,
    createOrganization,
    updateOrganization,
    deleteOrganization
  }
}